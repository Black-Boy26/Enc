# RIMON KHAN
# BLACK-BOY 
import base64
exec(base64.b64decode("IyB1bmNvbXB5bGU2IHZlcnNpb24gMy43LjQNCiMgUHl0aG9uIGJ5dGVjb2RlIDIuNw0KIyBEZWNvbXBpbGVkIGZyb206IFB5dGhvbiAyLjcuMTggKGRlZmF1bHQsIEFwciAgOSAyMDIyLCAxMjoyNDowMykgDQojIFtHQ0MgQW5kcm9pZCAoNzcxNDA1OSwgYmFzZWQgb24gcjQxNjE4M2MxKSBDbGFuZyAxMi4wLjggKGh0dHBzOi8vYW5kcm9pZC5nb29nbGUNCiMgRW1iZWRkZWQgZmlsZSBuYW1lOiByaW1vbg0KZnJvbSBzeXMgaW1wb3J0IHN0ZG91dA0KaW1wb3J0IHN1YnByb2Nlc3MgYXMgc3AsIG9zLCBzeXMsIHRpbWUsIHJhbmRvbSwgYmFzZTY0LCBtYXJzaGFsLCBnZXRwYXNzLCByZSwgemxpYg0KbSA9ICdceDFiWzE7OTFtJw0KdSA9ICdceDFiWzE7OTVtJw0KaCA9ICdceDFiWzE7OTJtJw0KcCA9ICdceDFiWzE7MzdtJw0KayA9ICdceDFiWzE7MzNtJw0KYiA9ICdceDFiWzE7MzRtJw0KYm0gPSAnXHgxYls5Nm0nDQphYm91dCA9ICgnXG4gICAgICAgICAgICAgICAge31DcmVhdG9yICAgICAgICAgICA6IHt9TWhhbmsgQmFyQmFyXG4gICAgICAgICAgICAgICAge31BYm91dCAgICAgICAgICAgICA6IHt9RW5jcnlwdCBBbmQgRGVjcnlwdCBUb29sXG4gICAgICAgICAgICAgICAge31WZXJzaW9uICAgICAgICAgICA6IHt9MS4wIChiZXRhKVxuICAgICAgICAgICAgICAgIHt9U3BlY2lhbCB0aGFua3MgdG8gOiB7fUFsbGFoIFNXVCBhbmQgWU9VXG4gICAgICAgICAgICAgICAge31Db2RlIG5hbWUgICAgICAgICA6IHt9VHl0eWQ6dlxuICAgICAgICAgICAgICAgIHt9VGVhbSAgICAgICAgICAgICAgOiB7fVVOREVSR1JPVU5EIFNDSUVOQ0VcbiAgICAgICAgICAgICAgICB7fUUtbWFpbCAgICAgICAgICAgIDoge31yb3lhbmk3ODk2QGdtYWlsLmNvbVxuICAgICAgICAgICAgICAgIHt9R2l0aHViICAgICAgICAgICAgOiB7fWdpdGh1Yi5jb20vTWhhbmtCYXJCYXJcbiAgICAgICAgICAgICAgICB7fVRlbGVncmFtICAgICAgICAgIDoge310Lm1lL01oYW5rQmFyQmFyXG4gICAgICAgICAgICAgICAge31GYWNlYm9vayAgICAgICAgICA6IHt9VXBzcyAoRmIgZ3VhIG1hc2loIGtlbmEgY3A6dilcbiAgICAgICAgICAgICAgICB7fURhdGUgICAgICAgICAgICAgIDoge30xNi40OSAwMi0wMi0yMDIwXG4gICAgICAgICAgICAgICAge31SZWdpb24gICAgICAgICAgICA6IHt9VGFuZ2VyYW5nLEJhbnRlbiwgSW5kb25lc2lhJykuZm9ybWF0KHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGssIHAsIGspDQoNCmRlZiBjaGF0KCk6DQogICAgbG9hZCgnU2lsYWhrYW4gVHVuZ2d1IFNlYmVudGFyLS0tJykNCiAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTYyODU2OTM1ODc5NjkmdGV4dD1Bc3NhbGFtdWFsYWlrdW0rUm95K0x1K01hc2loK0p1YWwrSmFuZGE/JykNCg0KDQprdW5jaSA9ICgnXG4gXHR7fSBceGUyXHg5Nlx4ODRceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODR7fSAqSGVsbG8gRHVkZSEhXG5cdHt9IFx4ZTJceDk2XHg4OCAgIFx4ZTJceDk2XHg4OHt9ICpXaGVyZSBBcmUgWW91P1xuXHRceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODggICAgICAgICBceGUyXHg5Nlx4ODRceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODRcblx0XHhlMlx4OTZceDg4XHhlMlx4OTZceDg4XHhlMlx4OTRceDgwXHhlMlx4OTZceDgwXHhlMlx4OTRceDgwXHhlMlx4OTZceDg4XHhlMlx4OTZceDg4ICBceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODggIFx4ZTJceDk2XHg4OFxuXHRceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODRceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODggIFx4ZTJceDk2XHg4MCBceGUyXHg5Nlx4ODAgICAgIFx4ZTJceDk2XHg4MFx4ZTJceDk2XHg4MCcpLmZvcm1hdChtLCBwLCBtLCBwKQ0KDQpkZWYgbGlzZW5zaV9lbmMoKToNCiAgICBjbHIoKQ0KICAgIHByaW50IGt1bmNpDQogICAgcHJpbnQgKCd7fVt7fSF7fV0ge31VcHNzISEgU29ycnkgRHVkZSBUaGlzIFRvb2xzIFJlcXVpcmVzcyBQYXNzd29yZCcpLmZvcm1hdChtLCBwLCBtLCBwKQ0KICAgIHBhc3dkID0gZ2V0cGFzcy5nZXRwYXNzKCgne31be31ceGMzXHg5N3t9XXt9IElucHV0IFBhc3N3b3JkIHt9Pj4ge30nKS5mb3JtYXQobSwgcCwgbSwgcCwgaywgcCkpDQogICAgaWYgcGFzd2QgPT0gJ0loaEFrdU1haCc6DQogICAgICAgIGphbGFuKCdQYXNzd29yZCBCZW5hciBceGUyXHg5Y1x4OTMgJywgMC4xKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgIG1lbnVfZW5jKCkNCiAgICBlbGlmIHBhc3dkID09ICcnOg0KICAgICAgICBydW4oJ01hc3Vra2FuIFBhc3N3b3JkIE55YSAhIScpDQogICAgICAgIHRpbWUuc2xlZXAoMS41KQ0KICAgICAgICBsaXNlbnNpX2VuYygpDQogICAgZWxzZToNCiAgICAgICAgamFsYW4oJ1Bhc3N3b3JkIFNhbGFoISEnLCAwLjEpDQogICAgICAgIGNoYXQoKQ0KDQoNCmRlZiBsaXNlbnNpX2RlYygpOg0KICAgIGNscigpDQogICAgcHJpbnQga3VuY2kNCiAgICBwcmludCAoJ3t9W3t9IXt9XSB7fVVwc3MhISBTb3JyeSBEdWRlIFRoaXMgVG9vbHMgUmVxdWlyZXNzIFBhc3N3b3JkJykuZm9ybWF0KG0sIHAsIG0sIHApDQogICAgcGFzd2QgPSBnZXRwYXNzLmdldHBhc3MoKCd7fVt7fVx4YzNceDk3e31de30gSW5wdXQgUGFzc3dvcmQge30+PiB7fScpLmZvcm1hdChtLCBwLCBtLCBwLCBrLCBwKSkNCiAgICBpZiBwYXN3ZCA9PSAnSWhoQWt1TWFoJzoNCiAgICAgICAgcnVuKCdQYXNzd29yZCBCZW5hcicpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgbWVudV9kZWMoKQ0KICAgIGVsaWYgcGFzd2QgPT0gJyc6DQogICAgICAgIHJ1bignTWFzdWtrYW4gUGFzc3dvcmQgTnlhICEhJykNCiAgICAgICAgdGltZS5zbGVlcCgxLjUpDQogICAgICAgIGxpc2Vuc2lfZGVjKCkNCiAgICBlbHNlOg0KICAgICAgICBydW4oJ1Bhc3N3b3JkIFNhbGFoISEnKQ0KICAgICAgICBjaGF0KCkNCg0KDQp0cnk6DQogICAgZnJvbSB1bmNvbXB5bGU2Lm1haW4gaW1wb3J0IGRlY29tcGlsZQ0KZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgIHNwLmNhbGwoJ3BpcDIgaW5zdGFsbCB1bmNvbXB5bGU2Jywgc2hlbGw9VHJ1ZSwgc3RkZXJyPXNwLlNURE9VVCkNCiAgICANCnJlZCA9ICdceDFiWzMxbScNCmdyZWVuID0gJ1x4MWJbMzJtJw0KeWVsbG93ID0gJ1x4MWJbMzNtJw0KYmx1ZSA9ICdceDFiWzM0bScNCm1hZ2VudGEgPSAnXHgxYlszNW0nDQpjeWFuID0gJ1x4MWJbMzZtJw0Kd2hpdGUgPSAnXHgxYlszN20nDQpyZXNldCA9ICdceDFiWzM5bScNCmJyYmxhY2sgPSAnXHgxYls5MG0nDQpSID0gJ1x4MWJbOTFtJw0KYnJncmVlbiA9ICdceDFiWzkybScNCmsgPSAnXHgxYls5M20nDQpicmJsdWUgPSAnXHgxYls5NG0nDQpicm1nbnQgPSAnXHgxYls5NW0nDQpicmN5YW4gPSAnXHgxYls5Nm0nDQpHID0gJ1x4MWJbOTdtJw0KDQpkZWYgamFsYW4oeiwgdCk6DQogICAgZm9yIGUgaW4gejoNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQ0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgdGltZS5zbGVlcCh0KQ0KDQoNCmRlZiBsb2FkKHdvcmQpOg0KICAgIGxpeCA9IFsnLycsICctJywgJ1x4ZTJceDk1XHhiMicsICd8J10NCiAgICBmb3IgaSBpbiByYW5nZSg1KToNCiAgICAgICAgZm9yIHggaW4gcmFuZ2UobGVuKGxpeCkpOg0KICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgoJ1xye317fScpLmZvcm1hdChzdHIod29yZCksIGxpeFt4XSkpDQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMikNCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KDQoNCmRlZiBiYW5uZXJfZGVjKCk6DQogICAgYmFubmVyID0gKCcgXG57fTo6Ojo6OjotLiAgLiw6Ojo6OjogICAgLiwtOjo6OjogICAgICAuLi4gICAgIC4gICAgICAgIDogICA6Ojo6Ojo6Ojo6LiA6OjogOjo6ICAgICAuLDo6Ojo6OiAgXG4gOzssICAgYGA7LDs7OztgYGBgICAsOzs7YGBgYGBgICAgLjs7Ozs7OzsuICA7OywuICAgIDs7OyAgIGA7OztgYGAuOzs7Ozs7IDs7OyAgICAgOzs7O2BgYGAgIFxuIGBbWyAgICAgW1sgW1tjY2NjICAgW1tbICAgICAgICAgLFtbICAgICBcXFtbLFtbW1ssICxbW1tbLCAgIGBdXW5ubl1dXCcgW1tbIFtbWyAgICAgIFtbY2NjYyAgIFxue30gICQkLCAgICAkJCAkJCIiIiIgICAkJCQgICAgICAgICAkJCQsICAgICAkJCQkJCQkJCQkJCIkJCQgICAgJCQkIiIgICAgJCQkICQkXCcgICAgICAkJCIiIiIgICBcbiAgODg4XyxvOFBcJyA4ODhvbyxfXyBgODhibyxfXyxvLCAiODg4LF8gXyw4OFA4ODggWTg4IiA4ODhvICAgODg4byAgICAgODg4bzg4b28sLl9fIDg4OG9vLF9fIFxuICBNTU1NUCJgICAgIiIiIllVTU1NICAiWVVNTU1NTVAiICAiWU1NTU1NUCIgTU1NICBNXCcgICJNTU0gICBZTU1NYiAgICBNTU0iIiIiWVVNTU0gIiIiIllVTU1NJykuZm9ybWF0KG0sIHApDQogICAgcnVubmluZyhiYW5uZXIpDQoNCg0KZGVmIGJhbm5lcl9lbmMoKToNCiAgICBiYW5uZXIgPSAoJ1xue30gXHhlMlx4OTZceDg4XHhlMlx4OTZceDgwXHhlMlx4OTZceDgwIFx4ZTJceDk2XHg4OFx4ZTJceDk2XHg4NFx4ZTJceDk0XHg4MFx4ZTJceDk2XHg4OCBceGUyXHg5Nlx4ODRceGUyXHg5Nlx4ODAgXHhlMlx4OTZceDg4XHhlMlx4OTZceDgwXHhlMlx4OTZceDgwXHhlMlx4OTZceDg0IFx4ZTJceDk2XHg4MFx4ZTJceDk2XHg4NFx4ZTJceDk0XHg4MFx4ZTJceDk2XHg4NFx4ZTJceDk2XHg4MCBceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODBceGUyXHg5Nlx4ODQgXHhlMlx4OTZceDgwXHhlMlx4OTZceDg4XHhlMlx4OTZceDgwXG4gXHhlMlx4OTZceDg4XHhlMlx4OTZceDgwXHhlMlx4OTZceDgwIFx4ZTJceDk2XHg4OFx4ZTJceDk0XHg4MFx4ZTJceDk2XHg4MFx4ZTJceDk2XHg4OCBceGUyXHg5Nlx4ODhceGUyXHg5NFx4ODAgXHhlMlx4OTZceDg4XHhlMlx4OTZceDkwXHhlMlx4OTZceDg4XHhlMlx4OTZceDgwIFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk2XHg4OFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MCBceGUyXHg5Nlx4ODhceGUyXHg5NFx4ODBceGUyXHg5Nlx4ODggXHhlMlx4OTRceDgwXHhlMlx4OTZceDg4XHhlMlx4OTRceDgwXG4gXHhlMlx4OTZceDgwXHhlMlx4OTZceDgwXHhlMlx4OTZceDgwIFx4ZTJceDk2XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk2XHg4MCBceGUyXHg5NFx4ODBceGUyXHg5Nlx4ODAgXHhlMlx4OTZceDgwXHhlMlx4OTRceDgwXHhlMlx4OTZceDgwXHhlMlx4OTZceDgwIFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk2XHg4MFx4ZTJceDk0XHg4MFx4ZTJceDk0XHg4MCBceGUyXHg5Nlx4ODhceGUyXHg5Nlx4ODBceGUyXHg5NFx4ODAgXHhlMlx4OTRceDgwXHhlMlx4OTZceDgwXHhlMlx4OTRceDgwJykuZm9ybWF0KG0pDQogICAgcnVubmluZyhiYW5uZXIpDQoNCg0KZGVmIHJ1bm5pbmcocyk6DQogICAgdHJ5Og0KICAgICAgICBmb3IgYyBpbiBzICsgJ1xuJzoNCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoYykNCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgwLjAwMSkNCg0KICAgIGV4Y2VwdCAoS2V5Ym9hcmRJbnRlcnJ1cHQsIEVPRkVycm9yKToNCiAgICAgICAgcnVuKCdOb25ha3RpZiEhIScpDQoNCg0KZGVmIHJ1bih4KToNCiAgICBwdCA9ICdceDFiWzE7MzdtJw0KICAgIHJkID0gJ1x4MWJbMTszN21ceDFiWzE7MzFtJw0KICAgIHJnID0gJ1x4MWJbNjszMm0nDQogICAgdHJ5Og0KICAgICAgICBudW0gPSAwDQogICAgICAgIHdoaWxlIG51bSA8IDE6DQogICAgICAgICAgICBmb3IgaSwgY2hhciBpbiBlbnVtZXJhdGUoeCk6DQogICAgICAgICAgICAgICAgaWYgaSA9PSAwOg0KICAgICAgICAgICAgICAgICAgICBwcmludCAnXHIlcyVzJXMlcycgJSAocmcsIGNoYXIubG93ZXIoKSwgcmQsIHhbMTpdKSwNCiAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAxOg0KICAgICAgICAgICAgICAgICAgICAgICAgcm95ID0geFswXS5sb3dlcigpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnXHIlcyVzJXMlcyVzJXMnICUgKHJkLCByb3ksIHB0LCBjaGFyLmxvd2VyKCksIHJnLCB4WzI6XSksDQogICAgICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBpID09IGk6DQogICAgICAgICAgICAgICAgICAgICAgICByb3kgPSB4WzA6aV0ubG93ZXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ1xyJXMlcyVzJXMlcyVzJyAlIChyZCwgcm95LCBwdCwgY2hhci5sb3dlcigpLCByZywgeFtpICsgMTpdKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDcpDQoNCiAgICAgICAgICAgIG51bSArPSAxDQoNCiAgICBleGNlcHQ6DQogICAgICAgIGV4aXQoKQ0KDQoNCmRlZiBjbHIoKToNCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCg0KDQpkZWYgbG9nbygpOg0KICAgIGJhbm5lcl9lbmMoKQ0KDQoNCmRlZiBiX21haW4oKToNCiAgICBibSA9ICgne31ceGUyXHg5NVx4OTRceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTdcblx4ZTJceDk1XHg5MXt9W3t9K3t9XXt9QXV0aG9yICA6IFJJTU9OIEtIQU4gICAgICAgICAgICAgICAgICAgICAgXHhlMlx4OTVceDkxXG5ceGUyXHg5NVx4OTF7fVt7fSt7fV17fUdpdGh1YiAgOiBCTEFDSy1CT1kgICAgICAgICAgICAgICAgICAgICAgIFx4ZTJceDk1XHg5MVxuXHhlMlx4OTVceDkxe31be30re31de31Ub29scyAgOiBFbmNyeXB0ICAgICAgICAgICAgICAgICAgICAgICAgICBceGUyXHg5NVx4OTFcblx4ZTJceDk1XHg5MXt9W3t9K3t9XXt9Q3JlYXRlICA6IDA0IC0gMDYgLSAyMDIyICAgICAgICAgICAgICAgICAgXHhlMlx4OTVceDkxXG5ceGUyXHg5NVx4OWFceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OTBceGUyXHg5NVx4OWQnKS5mb3JtYXQocCwgbSwgcCwgbSwgcCwgbSwgcCwgbSwgcCwgbSwgcCwgbSwgcCwgbSwgcCwgbSwgcCkNCiAgICBqYWxhbihibSwgMC4wMDEpDQoNCg0KZGVmIG1haW4oKToNCiAgICBjbHIoKQ0KICAgIGJfbWFpbigpDQogICAgcHJpbnQgKCdcblx4MWJbMTs5Mm0gICAgXG4gICAgICAgICAgIFtFbmNvbXBpbGUgbWVudV0gIFxuIFxuICAgICAgICAgICAgW0JMQUNLLUJPWV1cbnt9JykuZm9ybWF0KGJyYmx1ZSwgcmVzZXQpDQogICAgcnVubmluZygoJ1xue31be30xe31de30gRW5jcnlwdFxue317fXt9e317fVt7fTJ7fV17fSBSZXBvcnQgQnVnXG57fXt9e317fXt9W3t9M3t9XXt9IFVwZGF0ZSBUb29sc1xuJykuZm9ybWF0KG0sIHAsIG0sIHAsIG0sIHAsIG0sIHAsIG0sIHAsIG0sIHAsIG0sIHAsIG0sIHAsIG0sIHAsIG0sIHApKQ0KICAgIGZ1Y2sgPSByYXdfaW5wdXQoKCd7fVt7fT97fV17fSBDaG9vc2Uge30+PiB7fScpLmZvcm1hdChtLCBwLCBtLCBwLCBrLCBwKSkNCiAgICBpZiBmdWNrID09ICcxJyBvciBmdWNrID09ICcwMSc6DQogICAgICAgIGxvYWQoJ1NpbGFoa2FuIFR1bmdndSBTZWJlbnRhciA+LS0nKQ0KICAgICAgICBtZW51X2VuYygpDQogICAgZWxpZiBmdWNrID09ICc2JyBvciBmdWNrID09ICcwNic6DQogICAgICAgIGxvYWQoJ1NpbGFoa2FuIFR1bmdndSBTZWJlbnRhciA+LS0nKQ0KICAgICAgICBtZW51X2RlYygpDQogICAgZWxpZiBmdWNrID09ICcnOg0KICAgICAgICBydW4oJ0phbmdhbiBLb3NvbmcgR2JsayEhJykNCiAgICAgICAgbWFpbigpDQogICAgZWxpZiBmdWNrID09ICcyJyBvciBmdWNrID09ICcwMic6DQogICAgICAgIGphbGFuKHAgKyAzMSAqICdceGUyXHg5NVx4OTAnICsgaCArICdbJyArIGJtICsgJ0hhaWknICsgaCArICddJyArIHAgKyAnPicsIDAuMDA4KQ0KICAgICAgICBwcmludCAnXG4nICsgaCArICdbJyArIG0gKyAnIScgKyBoICsgJ10nICsgcCArICcgQ2hhdCBWaWEgV2hhdHNBcHAgJw0KICAgICAgICBjaGF0ID0gcmF3X2lucHV0KGggKyAnWycgKyBrICsgJz8nICsgaCArICddJyArIHAgKyAnIEVudGVyIHlvdXIgbWVzc2FnZSA6ICcpDQogICAgICAgIGNoYXQucmVwbGFjZSgnICcsICclMjAnKQ0KICAgICAgICBsb2FkKGggKyAnWycgKyBrICsgJ34nICsgaCArICddJyArIHAgKyAnTG9hZGluZyBwbGVhc2Ugd2FpdCAuLi4nKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzcC5jaGVja19vdXRwdXQoWw0KICAgICAgICAgICAgICdhbScsICdzdGFydCcsDQogICAgICAgICAgICAgJ2h0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPSs4ODAxNjIxMjk0NDE4JnRleHQ9UmVwb3J0IDogJyArIGNoYXQgKyAnJ10pDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHN5cy5leGl0KCdcbicgKyBoICsgJ1snICsgayArICchJyArIGggKyAnXScgKyBwICsgJyBGYWlsZWQgdG8gc2VuZCBtZXNzYWdlICcpDQoNCiAgICBlbGlmIGZ1Y2sgPT0gJzUnIG9yIGZ1Y2sgPT0gJzA1JzoNCiAgICAgICAgbG9hZCgnU2lsYWhrYW4gVHVuZ2d1IFNlYmVudGFyID4tLScpDQogICAgICAgIGNscigpDQogICAgICAgIHJ1bm5pbmcoYWJvdXQpDQogICAgICAgIHRpbWUuc2xlZXAoNSkNCiAgICAgICAgbWFpbigpDQogICAgZWxpZiBmdWNrID09ICczJyBvciBmdWNrID09ICcwMyc6DQogICAgICAgIGxvYWQoJ1NpbGFoa2FuIFR1bmdndSBTZWJlbnRhdCA+LS0nKQ0KICAgICAgICBjbHIoKQ0KICAgICAgICBvcy5zeXN0ZW0oJ2dpdCBwdWxsJykNCiAgICBlbHNlOg0KICAgICAgICBydW4oJ1BpbGloYW5ueWEgQ3VtYSAxLDIsMyw0ICYgNSBEb2FuZyBLb250b2whIScpDQogICAgICAgIG1haW4oKQ0KDQoNCmRlZiBtZW51X2VuYygpOg0KICAgIGNscigpDQogICAgYmFubmVyX2VuYygpDQogICAgcnVubmluZygnLS0tLS0tLS0tLS0tLS0tJykNCiAgICBydW5uaW5nKCgne31be30wMXt9XXt9IEVuY3J5cHQgQmFzZTE2JykuZm9ybWF0KG0sIHAsIG0sIGspKQ0KICAgIHJ1bm5pbmcoKCd7fVt7fTAye31de30gRW5jcnlwdCBCYXNlMzInKS5mb3JtYXQobSwgcCwgbSwgaykpDQogICAgcnVubmluZygoJ3t9W3t9MDN7fV17fSBFbmNyeXB0IEJhc2U2NCcpLmZvcm1hdChtLCBwLCBtLCBrKSkNCiAgICBydW5uaW5nKCgne31be30wNHt9XXt9IEVuY3J5cHQgSGV4JykuZm9ybWF0KG0sIHAsIG0sIGspKQ0KICAgIHJ1bm5pbmcoKCd7fVt7fTA1e31de30gRW5jcnlwdCBNYXJzaGFsJykuZm9ybWF0KG0sIHAsIG0sIGspKQ0KICAgIHJ1bm5pbmcoKCd7fVt7fTA2e31de30gQ29tcGlsZSBweSA+IHB5YycpLmZvcm1hdChtLCBwLCBtLCBrKSkNCiAgICBydW5uaW5nKCgne31be30wN3t9XXt9IEVuY3J5cHQgTWFyc2hhbCBabGliIEJhc2U2NCcpLmZvcm1hdChtLCBwLCBtLCBrKSkNCiAgICBydW5uaW5nKCgne31be30wOHt9XXt9IEVuY3J5cHQgWmxpYiAnKS5mb3JtYXQobSwgcCwgbSwgaykpDQogICAgcnVubmluZygoJ3t9W3t9MDB7fV17fSBFeGl0JykuZm9ybWF0KG0sIHAsIG0sIGspKQ0KICAgIHJ1bm5pbmcoJy0tLS0tLS0tLS0tLS0tLScpDQogICAgdHJ5Og0KICAgICAgICBpbnAgPSByYXdfaW5wdXQoKCd7fVt7fT8/e31de30gQ2hvb3NlIHt9Pj57fSAnKS5mb3JtYXQobSwgcCwgbSwgaywgaCwgcCkpDQogICAgZXhjZXB0IChLZXlib2FyZEludGVycnVwdCwgRU9GRXJyb3IpOg0KICAgICAgICBydW4oJ05vbmFrdGlmISEnKQ0KICAgICAgICBtYWluKCkNCg0KICAgIGlmIGlucCA9PSAnMScgb3IgaW5wID09ICcwMSc6DQogICAgICAgIGNscigpDQogICAgICAgIFNhdHUoKQ0KICAgIGVsaWYgaW5wID09ICcyJyBvciBpbnAgPT0gJzAyJzoNCiAgICAgICAgY2xyKCkNCiAgICAgICAgRHVhKCkNCiAgICBlbGlmIGlucCA9PSAnMycgb3IgaW5wID09ICcwMyc6DQogICAgICAgIGNscigpDQogICAgICAgIFRpZ2EoKQ0KICAgIGVsaWYgaW5wID09ICc0JyBvciBpbnAgPT0gJzA0JzoNCiAgICAgICAgY2xyKCkNCiAgICAgICAgRW1wYXQoKQ0KICAgIGVsaWYgaW5wID09ICc1JyBvciBpbnAgPT0gJzA1JzoNCiAgICAgICAgY2xyKCkNCiAgICAgICAgTGltYSgpDQogICAgZWxpZiBpbnAgPT0gJzYnIG9yIGlucCA9PSAnMDYnOg0KICAgICAgICBjbHIoKQ0KICAgICAgICBweWMoKQ0KICAgIGVsaWYgaW5wID09ICc3JyBvciBpbnAgPT0gJzA3JzoNCiAgICAgICAgY2xyKCkNCiAgICAgICAgZW16YigpDQogICAgZWxpZiBpbnAgPT0gJzgnIG9yIGlucCA9PSAnMDgnOg0KICAgICAgICBjbHIoKQ0KICAgICAgICBlemwoKQ0KICAgIGVsaWYgaW5wID09ICcnOg0KICAgICAgICBydW4oJ1BpbGloIE5vbW9ybnlhIFdvZSEhIScpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgbWVudV9lbmMoKQ0KICAgIGVsaWYgaW5wID09ICcwJyBvciBpbnAgPT0gJzAwJzoNCiAgICAgICAgZXhpdCgpDQogICAgZWxzZToNCiAgICAgICAgcnVuKCdTYWxhaCBNZW1hc3Vra2FuIFBpbGloYW4hIScpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgbWVudV9lbmMoKQ0KDQoNCmRlZiBtZW51X2RlYygpOg0KICAgIGNscigpDQogICAgYmFubmVyX2RlYygpDQogICAgcnVubmluZygnLS0tLS0tLS0tLS0tLS0tJykNCiAgICBydW5uaW5nKCgne31be30wMXt9XXt9IERlY3J5cHQgYmFzZTE2JykuZm9ybWF0KG0sIHAsIG0sIGspKQ0KICAgIHJ1bm5pbmcoKCd7fVt7fTAye31de30gRGVjcnlwdCBiYXNlMzInKS5mb3JtYXQobSwgcCwgbSwgaykpDQogICAgcnVubmluZygoJ3t9W3t9MDN7fV17fSBEZWNyeXB0IGJhc2U2NCcpLmZvcm1hdChtLCBwLCBtLCBrKSkNCiAgICBydW5uaW5nKCgne31be30wNHt9XXt9IERlY3J5cHQgSGV4JykuZm9ybWF0KG0sIHAsIG0sIGspKQ0KICAgIHJ1bm5pbmcoKCd7fVt7fTA1e31de30gRGVjcnlwdCBNYXJzaGFsJykuZm9ybWF0KG0sIHAsIG0sIGspKQ0KICAgIHJ1bm5pbmcoKCd7fVt7fTA2e31de30gVW5jb21weWxlNiBweWMgPiBweScpLmZvcm1hdChtLCBwLCBtLCBrKSkNCiAgICBydW5uaW5nKCgne31be30wN3t9XXt9IERlY3J5cHQgTWFyc2hhbCxabGliLEJhc2U2NCcpLmZvcm1hdChtLCBwLCBtLCBrKSkNCiAgICBydW5uaW5nKCgne31be30wOHt9XXt9IERlY3J5cHQgWmxpYicpLmZvcm1hdChtLCBwLCBtLCBrKSkNCiAgICBydW5uaW5nKCgne31be30wMHt9XXt9IEV4aXQnKS5mb3JtYXQobSwgcCwgbSwgaykpDQogICAgcnVubmluZygnLS0tLS0tLS0tLS0tLS0tJykNCiAgICB0cnk6DQogICAgICAgIGlucCA9IHJhd19pbnB1dCgoJ3t9W3t9Pz97fV17fSBDaG9vc2Uge30+Pnt9ICcpLmZvcm1hdChtLCBwLCBtLCBrLCBoLCBwKSkNCiAgICBleGNlcHQgKEtleWJvYXJkSW50ZXJydXB0LCBFT0ZFcnJvcik6DQogICAgICAgIHJ1bignTm9uYWt0aWYhIScpDQogICAgICAgIG1haW4oKQ0KDQogICAgaWYgaW5wID09ICcxJyBvciBpbnAgPT0gJzAxJzoNCiAgICAgICAgY2xyKCkNCiAgICAgICAgRW5hbSgpDQogICAgZWxpZiBpbnAgPT0gJzInIG9yIGlucCA9PSAnMDInOg0KICAgICAgICBjbHIoKQ0KICAgICAgICBUdWp1aCgpDQogICAgZWxpZiBpbnAgPT0gJzMnIG9yIGlucCA9PSAnMDMnOg0KICAgICAgICBjbHIoKQ0KICAgICAgICBEZWxhcGFuKCkNCiAgICBlbGlmIGlucCA9PSAnNCcgb3IgaW5wID09ICcwNCc6DQogICAgICAgIGNscigpDQogICAgICAgIFNlbWJpbGFuKCkNCiAgICBlbGlmIGlucCA9PSAnNScgb3IgaW5wID09ICcwNSc6DQogICAgICAgIGNscigpDQogICAgICAgIHVubWFyc2goKQ0KICAgIGVsaWYgaW5wID09ICc2JyBvciBpbnAgPT0gJzA2JzoNCiAgICAgICAgY2xyKCkNCiAgICAgICAgdW5weWMoKQ0KICAgIGVsaWYgaW5wID09ICc3JyBvciBpbnAgPT0gJzA3JzoNCiAgICAgICAgY2xyKCkNCiAgICAgICAgbXpiKCkNCiAgICBlbGlmIGlucCA9PSAnOCcgb3IgaW5wID09ICcwOCc6DQogICAgICAgIGNscigpDQogICAgICAgIHpsKCkNCiAgICBlbGlmIGlucCA9PSAnJzoNCiAgICAgICAgcnVuKCdQaWxpaCBOb21vcm55YSBXb2UhISEnKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgIG1lbnVfZGVjKCkNCiAgICBlbGlmIGlucCA9PSAnMCcgb3IgaW5wID09ICcwMCc6DQogICAgICAgIGV4aXQoKQ0KICAgIGVsc2U6DQogICAgICAgIHJ1bignU2FsYWggTWVtYXN1a2thbiBQaWxpaGFuISEnKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgIG1lbnVfZGVjKCkNCg0KDQpkZWYgU2F0dSgpOg0KICAgIGNscigpDQogICAgbG9nbygpDQogICAgdHJ5Og0KICAgICAgICBmID0gcmF3X2lucHV0KCdGaWxlbmFtZXM6ICcpDQogICAgZXhjZXB0Og0KICAgICAgICBleGl0KCkNCg0KICAgIHRyeToNCiAgICAgICAgYmsgPSBvcGVuKGYsICdyJykucmVhZCgpDQogICAgZXhjZXB0Og0KICAgICAgICBydW4oJ2ZpbGUgJXMgdGlkYWsgZGl0ZW11a2FuICcgJSBmKQ0KICAgICAgICB0aW1lLnNsZWVwKDEuNSkNCiAgICAgICAgU2F0dSgpDQoNCiAgICBlbiA9IGJhc2U2NC5iMTZlbmNvZGUoYmspDQogICAgZmYgPSBmICsgJ2MnDQogICAgb3BlbihmZiwgJ3cnKS53cml0ZSgnaW1wb3J0IGJhc2U2NFxuZXhlYyhiYXNlNjQuYjE2ZGVjb2RlKCIlcyIpKScgJSBlbikNCiAgICBubSA9ICgnJykuam9pbihmLnNwbGl0KCcuJylbOjFdKSArICctZW5jLnB5Jw0KICAgIG9zLnJlbmFtZShmZiwgbm0pDQogICAgcnVuKCdmaWxlIGJlcmhhc2lsIGRpIGVuY3J5cHQgbWVucmltb24gJXMgJyAlIG5tKQ0KDQoNCmRlZiBEdWEoKToNCiAgICBjbHIoKQ0KICAgIGxvZ28oKQ0KICAgIHRyeToNCiAgICAgICAgZiA9IHJhd19pbnB1dCgnRmlsZW5hbWVzOiAnKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgZXhpdCgpDQoNCiAgICB0cnk6DQogICAgICAgIGJrID0gb3BlbihmLCAncicpLnJlYWQoKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcnVuKCdmaWxlICVzIHRpZGFrIGRpdGVtdWthbiAnICUgZikNCiAgICAgICAgZXhpdCgpDQoNCiAgICBlbiA9IGJhc2U2NC5iMzJlbmNvZGUoYmspDQogICAgZmYgPSBmICsgJ2MnDQogICAgb3BlbihmZiwgJ3cnKS53cml0ZSgnaW1wb3J0IGJhc2U2NFxuZXhlYyhiYXNlNjQuYjMyZGVjb2RlKCInICsgZW4gKyAnIikpJykNCiAgICBubSA9ICgnJykuam9pbihmLnNwbGl0KCcuJylbOjFdKSArICctZW5jLnB5Jw0KICAgIG9zLnJlbmFtZShmZiwgbm0pDQogICAgcnVuKCdmaWxlIGJlcmhhc2lsIGRpIGVuY3J5cHQgbWVucmltb24gJXMgJyAlIG5tKQ0KDQoNCmRlZiBUaWdhKCk6DQogICAgY2xyKCkNCiAgICBsb2dvKCkNCiAgICB0cnk6DQogICAgICAgIGYgPSByYXdfaW5wdXQoJ0ZpbGVuYW1lczogJykNCiAgICBleGNlcHQ6DQogICAgICAgIGV4aXQoKQ0KDQogICAgdHJ5Og0KICAgICAgICBiayA9IG9wZW4oZiwgJ3InKS5yZWFkKCkNCiAgICBleGNlcHQ6DQogICAgICAgIHJ1bignZmlsZSAlcyB0aWRhayBkaXRlbXVrYW4gJyAlIGYpDQogICAgICAgIGV4aXQoKQ0KDQogICAgZW4gPSBiYXNlNjQuYjY0ZW5jb2RlKGJrKQ0KICAgIGZmID0gZiArICdjJw0KICAgIG9wZW4oZmYsICd3Jykud3JpdGUoJ2ltcG9ydCBiYXNlNjRcbmV4ZWMoYmFzZTY0LmI2NGRlY29kZSgiJyArIGVuICsgJyIpKScpDQogICAgbm0gPSAoJycpLmpvaW4oZi5zcGxpdCgnLicpWzoxXSkgKyAnLWVuYy5weScNCiAgICBvcy5yZW5hbWUoZmYsIG5tKQ0KICAgIHJ1bignZmlsZSBiZXJoYXNpbCBkaSBlbmNyeXB0IG1lbnJpbW9uICVzICcgJSBubSkNCg0KDQpkZWYgRW1wYXQoKToNCiAgICBjbHIoKQ0KICAgIGxvZ28oKQ0KICAgIHRyeToNCiAgICAgICAgZiA9IHJhd19pbnB1dCgnRmlsZW5hbWVzOiAnKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgZXhpdCgpDQoNCiAgICB0cnk6DQogICAgICAgIGJrID0gb3BlbihmLCAncicpLnJlYWQoKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcnVuKCdmaWxlICVzIHRpZGFrIGRpdGVtdWthbiAnICUgZikNCiAgICAgICAgZXhpdCgpDQoNCiAgICBlbiA9IGJrLmVuY29kZSgnaGV4JykNCiAgICBmZiA9IGYgKyAnYycNCiAgICBvcGVuKGZmLCAndycpLndyaXRlKCdleGVjKCInICsgZW4gKyAnIikuZGVjb2RlKCJoZXgiKScpDQogICAgbm0gPSAoJycpLmpvaW4oZi5zcGxpdCgnLicpWzoxXSkgKyAnLWVuYy5weScNCiAgICBvcy5yZW5hbWUoZmYsIG5tKQ0KICAgIHJ1bignZmlsZSBiZXJoYXNpbCBkaSBlbmNyeXB0IG1lbnJpbW9uICVzICcgJSBubSkNCg0KDQpkZWYgTGltYSgpOg0KICAgIGNscigpDQogICAgbG9nbygpDQogICAgdHJ5Og0KICAgICAgICBmID0gcmF3X2lucHV0KCdGaWxlbmFtZXM6ICcpDQogICAgZXhjZXB0Og0KICAgICAgICBleGl0KCkNCg0KICAgIHRyeToNCiAgICAgICAgYmsgPSBvcGVuKGYsICdyJykucmVhZCgpDQogICAgZXhjZXB0Og0KICAgICAgICBydW4oJ2ZpbGUgJXMgdGlkYWsgZGl0ZW11a2FuICcgJSBmKQ0KICAgICAgICBleGl0KCkNCg0KICAgIGMgPSBjb21waWxlKGJrLCAnPHJveT4nLCAnZXhlYycpDQogICAgZW4gPSBtYXJzaGFsLmR1bXBzKGMpDQogICAgZmYgPSBmICsgJ2MnDQogICAgb3BlbihmZiwgJ3cnKS53cml0ZSgnaW1wb3J0IG1hcnNoYWxcbmV4ZWMobWFyc2hhbC5sb2FkcygnICsgcmVwcihlbikgKyAnKSknKQ0KICAgIG5tID0gKCcnKS5qb2luKGYuc3BsaXQoJy4nKVs6MV0pICsgJy1lbmMucHknDQogICAgb3MucmVuYW1lKGZmLCBubSkNCiAgICBydW4oJ2ZpbGUgYmVyaGFzaWwgZGkgZW5jcnlwdCBtZW5yaW1vbiAlcyAnICUgbm0pDQoNCg0KZGVmIGVtemIoKToNCiAgICBjbHIoKQ0KICAgIGxvZ28oKQ0KICAgIHRyeToNCiAgICAgICAgZmlsZSA9IHJhd19pbnB1dCgnRmlsZTogJykNCiAgICAgICAgZmlsZW9wZW4gPSBvcGVuKGZpbGUpLnJlYWQoKQ0KICAgICAgICBubyA9IGNvbXBpbGUoZmlsZW9wZW4sICdhc28nLCAnZXhlYycpDQogICAgICAgIGIgPSBtYXJzaGFsLmR1bXBzKG5vKQ0KICAgICAgICBjID0gemxpYi5jb21wcmVzcyhiKQ0KICAgICAgICBkID0gYmFzZTY0LmI2NGVuY29kZShjKQ0KICAgICAgICBlID0gJ2ltcG9ydCBtYXJzaGFsLHpsaWIsYmFzZTY0XG5leGVjKG1hcnNoYWwubG9hZHMoemxpYi5kZWNvbXByZXNzKGJhc2U2NC5iNjRkZWNvZGUoIicgKyBkICsgJyIpKSkpJw0KICAgICAgICBmID0gZmlsZS5yZXBsYWNlKCcucHknLCAnLWVuYy5weScpDQogICAgICAgIGcgPSBvcGVuKGYsICd3JykNCiAgICAgICAgZy53cml0ZShlKQ0KICAgICAgICBnLmNsb3NlKCkNCiAgICAgICAgcnVuKCdmaWxlIGJlcmhhc2lsIGRpIGVuY3J5cHQgbWVucmltb24gJXMgJyAlIGYpDQogICAgICAgIHJhd19pbnB1dCgnVGVrYW4gRW50ZXIgVW50dWsgS2VtYmFsaSBLZSBNZW51JykNCiAgICAgICAgbWFpbigpDQogICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgIHJ1bignZmlsZSB0aWRhayBkaXRlbXVrYW4gJykNCiAgICAgICAgcmF3X2lucHV0KCdUZWthbiBFbnRlciBVbnR1ayBLZW1iYWxpIEtlIE1lbnUnKQ0KICAgICAgICBlbXpiKCkNCg0KDQpkZWYgZXpsKCk6DQogICAgcHJpbnQgJ0VuY3J5cHQgWmxpYicNCiAgICBmaWxlID0gcmF3X2lucHV0KCdGaWxlIDogJykNCiAgICBvdXQgPSBmaWxlLnJlcGxhY2UoJy5weScsICctZW5jLnB5JykNCiAgICBvYSA9IG9wZW4oZmlsZSkucmVhZCgpDQogICAgeHMgPSB6bGliLmNvbXByZXNzKG9hKQ0KICAgIHMgPSBvcGVuKG91dCwgJ3cnKQ0KICAgIHMud3JpdGUoJ2ltcG9ydCB6bGliXG5leGVjKHpsaWIuZGVjb21wcmVzcygnICsgcmVwcih4cykgKyAnKSknKQ0KICAgIHMuY2xvc2UoKQ0KICAgIHByaW50ICdGaWxlIHNhdmVkIGFzICcgKyBvdXQNCg0KDQpkZWYgRW5hbSgpOg0KICAgIGNscigpDQogICAgYmFubmVyX2RlYygpDQogICAgdHJ5Og0KICAgICAgICBwcmludCAnRGVjIGJhc2U2NC5iMTZkZWNvY2RlJw0KICAgICAgICBmID0gcmF3X2lucHV0KCdGaWxlbmFtZXM6ICcpDQogICAgZXhjZXB0Og0KICAgICAgICBleGl0KCkNCg0KICAgIHRyeToNCiAgICAgICAgYmsgPSBvcGVuKGYsICdyJykucmVhZCgpDQogICAgZXhjZXB0Og0KICAgICAgICBydW4oJ2ZpbGUgJXMgdGlkYWsgZGl0ZW11a2FuICcgJSBmKQ0KICAgICAgICBleGl0KCkNCg0KICAgIGJrID0gYmsucmVwbGFjZSgnZXhlYyhiYXNlNjQuYjE2ZGVjb2RlKCInLCAnJykNCiAgICBiayA9IGJrLnJlcGxhY2UoJyIpKScsICcnKQ0KICAgIGJrID0gYmsucmVwbGFjZSgnaW1wb3J0IGJhc2U2NFxuJywgJycpDQogICAgZW4gPSBiYXNlNjQuYjE2ZGVjb2RlKGJrKQ0KICAgIGZmID0gZiArICdjJw0KICAgIG9wZW4oZmYsICd3Jykud3JpdGUoZW4pDQogICAgbm0gPSAoJycpLmpvaW4oZi5zcGxpdCgnLicpWzoxXSkgKyAnLWRlYy5weScNCiAgICBvcy5yZW5hbWUoZmYsIG5tKQ0KICAgIHJ1bignZmlsZSBiZXJoYXNpbCBkaSBkZWNyeXB0IG1lbnJpbW9uICVzICcgJSBubSkNCg0KDQpkZWYgVHVqdWgoKToNCiAgICBjbHIoKQ0KICAgIGJhbm5lcl9kZWMoKSgpDQogICAgdHJ5Og0KICAgICAgICBwcmludCAnRGVjIGJhc2U2NC5iMzJkZWNvZGUnDQogICAgICAgIGYgPSByYXdfaW5wdXQoJ0ZpbGVuYW1lczogJykNCiAgICBleGNlcHQ6DQogICAgICAgIGV4aXQoKQ0KDQogICAgdHJ5Og0KICAgICAgICBiayA9IG9wZW4oZiwgJ3InKS5yZWFkKCkNCiAgICBleGNlcHQ6DQogICAgICAgIHJ1bignZmlsZSAlcyB0aWRhayBkaXRlbXVrYW4gJyAlIGYpDQogICAgICAgIGV4aXQoKQ0KDQogICAgYmsgPSBiay5yZXBsYWNlKCdleGVjKGJhc2U2NC5iMzJkZWNvZGUoIicsICcnKQ0KICAgIGJrID0gYmsucmVwbGFjZSgnIikpJywgJycpDQogICAgYmsgPSBiay5yZXBsYWNlKCdpbXBvcnQgYmFzZTY0XG4nLCAnJykNCiAgICBlbiA9IGJhc2U2NC5iMzJkZWNvZGUoYmspDQogICAgZmYgPSBmICsgJ2MnDQogICAgb3BlbihmZiwgJ3cnKS53cml0ZShlbikNCiAgICBubSA9ICgnJykuam9pbihmLnNwbGl0KCcuJylbOjFdKSArICctZGVjLnB5Jw0KICAgIG9zLnJlbmFtZShmZiwgbm0pDQogICAgcnVuKCdmaWxlIGJlcmhhc2lsIGRpIGRlY3J5cHQgbWVucmltb24gJXMgJyAlIG5tKQ0KDQoNCmRlZiBEZWxhcGFuKCk6DQogICAgY2xyKCkNCiAgICBiYW5uZXJfZGVjKCkNCiAgICB0cnk6DQogICAgICAgIHByaW50ICdEZWMgYmFzZTY0LmI2NGRlY29kZScNCiAgICAgICAgZiA9IHJhd19pbnB1dCgnRmlsZW5hbWVzOiAnKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgZXhpdCgpDQoNCiAgICB0cnk6DQogICAgICAgIGJrID0gb3BlbihmLCAncicpLnJlYWQoKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcnVuKCdmaWxlICVzIHRpZGFrIGRpdGVtdWthbiAnICUgZikNCiAgICAgICAgZXhpdCgpDQoNCiAgICBiayA9IGJrLnJlcGxhY2UoKydleGVjKGJhc2U2NC5iNjRkZWNvZGUoIicsICcnKQ0KICAgIGJrID0gYmsucmVwbGFjZSgnIikpJywgJycpDQogICAgYmsgPSBiay5yZXBsYWNlKCdpbXBvcnQgYmFzZTY0XG4nLCAnJykNCiAgICBlbiA9IGJhc2U2NC5iNjRkZWNvZGUoYmspDQogICAgZmYgPSBmICsgJ2MnDQogICAgb3BlbihmZiwgJ3cnKS53cml0ZShlbikNCiAgICBubSA9ICgnJykuam9pbihmLnNwbGl0KCcuJylbOjFdKSArICctZGVjLnB5Jw0KICAgIG9zLnJlbmFtZShmZiwgbm0pDQogICAgcnVuKCdmaWxlIGJlcmhhc2lsIGRpIGRlY3J5cHQgbWVucmltb24gJXMgJyAlIG5tKQ0KDQoNCmRlZiBTZW1iaWxhbigpOg0KICAgIGNscigpDQogICAgYmFubmVyX2RlYygpDQogICAgdHJ5Og0KICAgICAgICBwcmludCAnRGVjIGhleCcNCiAgICAgICAgZiA9IHJhd19pbnB1dCgnRmlsZW5hbWVzOiAnKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgZXhpdCgpDQoNCiAgICB0cnk6DQogICAgICAgIGJrID0gb3BlbihmLCAncicpLnJlYWQoKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgcnVuKCdmaWxlICVzIHRpZGFrIGRpdGVtdWthbiAnICUgZikNCiAgICAgICAgZXhpdCgpDQoNCiAgICBiayA9IGJrLnJlcGxhY2UoJ2V4ZWMoIicsICcnKSBvciBiay5yZXBsYWNlKCJleGVjKCciLCAnJykNCiAgICBiayA9IGJrLnJlcGxhY2UoJyIpLmRlY29kZSgiaGV4IiknLCAnJykgb3IgYmsucmVwbGFjZSgiJykuZGVjb2RlKCdoZXgnKSIsICcnKQ0KICAgIGVuID0gc3RyKGJrKS5kZWNvZGUoJ2hleCcpDQogICAgZmYgPSBmICsgJ2MnDQogICAgb3BlbihmZiwgJ3cnKS53cml0ZShlbikNCiAgICBubSA9ICgnJykuam9pbihmLnNwbGl0KCcuJylbOjFdKSArICctZGVjLnB5Jw0KICAgIG9zLnJlbmFtZShmZiwgbm0pDQogICAgcnVuKCdmaWxlIGJlcmhhc2lsIGRpIGRlY3J5cHQgbWVucmltb24gJXMgJyAlIG5tKQ0KDQoNCmRlZiB1bm1hcnNoKCk6DQogICAgamFsYW4ocCArIDMxICogJ1x4ZTJceDk1XHg5MCcgKyBoICsgJ1snICsgYm0gKyAnVU5NQVJTSCcgKyBoICsgJ10nICsgcCArICc+JywgMC4wMDgpDQogICAgcHJpbnQgaCArICdcbk1lbnUgJyArIHAgKyAnOlxuIFsnICsgaCArICcxJyArIHAgKyAnXS4gQXV0b21hdGljIERldGVjdGlvbiBWZXJzaW9uIFNjcmlwdFxuIFsnICsgaCArICcyJyArIHAgKyAnXS4gQmFjayBUbyBNZW51Jw0KICAgIHRyeToNCiAgICAgICAgcGlsID0gcmF3X2lucHV0KGggKyAnWycgKyBrICsgJz8nICsgaCArICddJyArIHAgKyAnIENob2ljZS0tPiAnKQ0KICAgIGV4Y2VwdCBJT0Vycm9yOg0KICAgICAgICB1bm1hcnNoKCkNCg0KICAgIGlmIHBpbCA9PSAnMSc6DQogICAgICAgIHBhc3MNCiAgICBlbHNlOg0KICAgICAgICBpZiBwaWwgPT0gJzInOg0KICAgICAgICAgICAgbWFpbigpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcmludCBoICsgJ1snICsgbSArICchJyArIGggKyAnXScgKyBwICsgJyBDaG9vc2UgdGhlIHJpZ2h0IG9uZScNCiAgICAgICAgICAgIHVubWFyc2goKQ0KICAgICAgICBjZWsgPSAxDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHByaW50IGggKyAnWycgKyBrICsgJyMnICsgaCArICddJyArIHAgKyAnIEZvciBFeGFtcGxlIDogL3BhdGgvbWFyc2gucHknDQogICAgICAgICAgICBmaWxlID0gcmF3X2lucHV0KGggKyAnWycgKyBrICsgJz8nICsgaCArICddJyArIHAgKyAnIElucHV0IEZpbGUgOiAnKQ0KICAgICAgICAgICAgZiA9IG9wZW4oZmlsZSwgJ3InKS5yZWFkbGluZXMoKQ0KICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGYpKToNCiAgICAgICAgICAgICAgICBpZiBmW2ldWzA6NF0gPT0gJ2V4ZWMnOg0KICAgICAgICAgICAgICAgICAgICBpZiBmW2ldWzE5XSA9PSAnYic6DQogICAgICAgICAgICAgICAgICAgICAgICBjZWsgPSAzDQogICAgICAgICAgICAgICAgICAgIGVsaWYgZltpXVsyMF0gPT0gJ2MnOg0KICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gMg0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgY2VrID0gMQ0KDQogICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOg0KICAgICAgICAgICAgcHJpbnQgaCArICdbJyArIG0gKyAnIScgKyBoICsgJ10nICsgcCArICcgUHJvZ3JhbSBFcnJvciEhIScNCiAgICAgICAgICAgIHN5cy5leGl0KCkNCiAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICAgICAgcHJpbnQgaCArICdbJyArIGsgKyAnXicgKyBoICsgJ10nICsgcCArICcgY3RybCtjIFxuJw0KICAgICAgICAgICAgcHJpbnQgaCArICdbJyArIGsgKyAnIycgKyBoICsgJ10nICsgcCArICcgRXhpdCEhIVxuJw0KICAgICAgICAgICAgdGltZS5zbGVlcCgzKQ0KICAgICAgICAgICAgc3lzLmV4aXQoKQ0KICAgICAgICBleGNlcHQgRU9GRXJyb3I6DQogICAgICAgICAgICBwcmludCBoICsgJ1snICsgayArICdeJyArIGggKyAnXScgKyBwICsgJyBjdHJsK2QgXG4nDQogICAgICAgICAgICBwcmludCBoICsgJ1snICsgayArICcjJyArIGggKyAnXScgKyBwICsgJyBFeGl0ISEhXG4nDQogICAgICAgICAgICB0aW1lLnNsZWVwKDMpDQogICAgICAgICAgICBzeXMuZXhpdCgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgc3RyaW5nID0gb3BlbihmaWxlLCAncicpLnJlYWQoKQ0KICAgICAgICAgICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgICAgICAgICAgcHJpbnQgJ1xuJyArIGggKyAnWycgKyBtICsgJyEnICsgaCArICddJyArIHAgKyAnIEZpbGUgTm90IEZvdW5kJw0KICAgICAgICAgICAgICAgIHJhd19pbnB1dChoICsgJ1snICsgayArICdeJyArIGggKyAnXScgKyBwICsgJyBQcmVzcyBFbnRlciB0byBSZXR1cm4gdG8gdGhlIG1lbnUgJykNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICAgICAgICAgICAgICBtYWluKCkNCg0KICAgIGlmIGNlayA9PSAyOg0KICAgICAgICBweSA9ICdweXRob24yJw0KICAgICAgICBkZWMgPSAnZGVjb21waWxlKDIuNywgeCwgc3Rkb3V0KScNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShoICsgJ1snICsgayArICcjJyArIGggKyAnXScpDQogICAgICAgIGphbGFuKHAgKyAnIGNoZWNrIHRoZSBzY3JpcHQgdmVyc2lvbicsIDAuMSkNCiAgICAgICAgdGltZS5zbGVlcCgxLjUpDQogICAgICAgIHByaW50ICdcbicgKyBoICsgJ1snICsgbSArICcqJyArIGggKyAnXScgKyBwICsgJyBweXRob24gdmVyc2lvbiAyIHdhcyBkZXRlY3RlZCcNCiAgICAgICAgdGltZS5zbGVlcCgxKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICB4ID0gcmUuc2VhcmNoKCcoKD88IVtcXFxcXSlbXFxcJyJdKSgoPzouKD8hKD88IVtcXFxcXSlcXDEpKSouPylcXDEnLCBzdHJpbmcpLmdyb3VwKCkNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgcmFpc2UgZQ0KDQogICAgZWxzZToNCiAgICAgICAgaWYgY2VrID09IDM6DQogICAgICAgICAgICBweSA9ICdweXRob24zJw0KICAgICAgICAgICAgZGVjID0gJ2RlY29tcGlsZSgzLjgsIHgsIHN0ZG91dCknDQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGggKyAnWycgKyBrICsgJyMnICsgaCArICddJykNCiAgICAgICAgICAgIGphbGFuKHAgKyAnIGNoZWNrIHRoZSBzY3JpcHQgdmVyc2lvbicsIDAuMSkNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQ0KICAgICAgICAgICAgcHJpbnQgJ1xuJyArIGggKyAnWycgKyBtICsgJyonICsgaCArICddJyArIHAgKyAnIHB5dGhvbiB2ZXJzaW9uIDMgd2FzIGRldGVjdGVkJw0KICAgICAgICAgICAgdGltZS5zbGVlcCgxKQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHggPSAnYicgKyByZS5zZWFyY2goJygoPzwhW1xcXFxdKVtcXFwnIl0pKCg/Oi4oPyEoPzwhW1xcXFxdKVxcMSkpKi4/KVxcMScsIHN0cmluZykuZ3JvdXAoKQ0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIHJhaXNlIGUNCg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQgaCArICdbJyArIG0gKyAnIScgKyBoICsgJ10nICsgcCArICcgRmlsZSBOb3QgU3Vwb3J0Jw0KICAgICAgICAgICAgcmF3X2lucHV0KGggKyAnWycgKyBrICsgJ14nICsgaCArICddJyArIHAgKyAnIFByZXNzIEVudGVyIHRvIFJldHVybiB0byB0aGUgbWVudSAnKQ0KICAgICAgICAgICAgbWFpbigpDQogICAgICAgIGZpbGVvdXQgPSBvcGVuKCd1bi5weScsICd3JykNCiAgICAgICAgZmlsZW91dC53cml0ZSgnZnJvbSBzeXMgaW1wb3J0IHN0ZG91dFxuZnJvbSB1bmNvbXB5bGU2Lm1haW4gaW1wb3J0IGRlY29tcGlsZVxuaW1wb3J0IG1hcnNoYWxcblxuJykNCiAgICAgICAgZmlsZW91dC53cml0ZSgneCA9IG1hcnNoYWwubG9hZHMoJyArIHggKyAnKVxuJykNCiAgICAgICAgZmlsZW91dC53cml0ZShkZWMpDQogICAgICAgIGZpbGVvdXQuY2xvc2UoKQ0KICAgICAgICBsb2FkKGggKyAnWycgKyBrICsgJyMnICsgaCArICddJyArIHAgKyAnIFVubWFyc2hhbCBwcm9jZXNzIFdhaXQgYSBtaW51dGUgLi4uJykNCiAgICAgICAgc3AuY2FsbChweSArICcgdW4ucHkgPiB1bnB5Yy9kZWMucHknLCBzaGVsbD1UcnVlLCBzdGRlcnI9c3AuU1RET1VUKQ0KICAgICAgICBvcy5zeXN0ZW0oJ3JtIHVuLnB5JykNCiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgICAgZGVsYXkgPSBvcGVuKCd1bnB5Yy9kZWMucHknLCAncicpLnJlYWRsaW5lcygpDQogICAgICAgIGZvciB4IGluIHJhbmdlKGxlbihkZWxheSkpOg0KICAgICAgICAgICAgamFsYW4oZGVsYXlbeF0sIDAuMDAwMSkNCg0KICAgIHByaW50ICdcblxuJyArIGggKyAnWycgKyBrICsgJyMnICsgaCArICddJyArIHAgKyAnIFN1Y2Nlc3NmdWxseSBEZWNvbXBpbGVkJw0KICAgIHByaW50IGggKyAnWycgKyBrICsgJyMnICsgaCArICddJyArIHAgKyAnIGZpbGUgc2F2ZWQgOiB1bnB5Yy9kZWMucHknDQogICAgYXNrID0gcmF3X2lucHV0KGggKyAnWycgKyBrICsgJz8nICsgaCArICddJyArIHAgKyAnIERlY29tcGlsZSBBZ2Fpbj8geS90ICcpDQogICAgaWYgYXNrID09ICd5JyBvciBhc2sgPT0gJ1knOg0KICAgICAgICBtYWluKCkNCiAgICBlbGlmIGFzayA9PSAndCcgb3IgYXNrID09ICdUJzoNCiAgICAgICAgc3lzLmV4aXQoKQ0KICAgIGVsc2U6DQogICAgICAgIHByaW50IGggKyAnWycgKyBtICsgJyEnICsgaCArICddJyArIHAgKyAnIENob29zZSB0aGUgcmlnaHQgb25lICcgKyBtICsgJyEhIScNCiAgICAgICAgcmF3X2lucHV0KGggKyAnWycgKyBrICsgJ14nICsgaCArICddJyArIHAgKyAnIFByZXNzIEVudGVyIHRvIFJldHVybiB0byB0aGUgbWVudSAnKQ0KICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCg0KDQpkZWYgcHljKCk6DQogICAgcHJpbnQgbSArICdbJyArIHAgKyAnIycgKyBtICsgJ10nICsgcCArICcgRm9yIEV4YW1wbGUgOiAvcGF0aC9tYXJzaC5weScNCiAgICBmID0gcmF3X2lucHV0KG0gKyAnWycgKyBwICsgJz8nICsgbSArICddJyArIHAgKyAnIEVudGVyIFlvdXIgRmlsZSA6ICcpDQogICAgZnJvbSBweV9jb21waWxlIGltcG9ydCBjb21waWxlDQogICAgY29tcGlsZShmKQ0KICAgIGxvYWQobSArICdbJyArIHAgKyAnIycgKyBtICsgJ10nICsgcCArICcgQ29tcGlsZSBwcm9jZXNzIFdhaXQgYSBtaW51dGUgLi4uJykNCiAgICBqYWxhbignXG4nICsgbSArICdbJyArIHAgKyAnIycgKyBtICsgJ10nICsgcCArICcgZmlsZSBzdWNjZXNzZnVsbHkgY29tcGlsZWQnLCAwLjAxKQ0KICAgIHByaW50ICdcbicgKyBtICsgJ1snICsgcCArICcjJyArIG0gKyAnXScgKyBwICsgKCcgRmlsZSBTYXZlZDoge31jJykuZm9ybWF0KGYpDQogICAgYXNrID0gcmF3X2lucHV0KG0gKyAnWycgKyBwICsgJz8nICsgbSArICddJyArIHAgKyAnIENvbXBpbGUgQWdhaW4/IHkvdCA+PiAnKQ0KICAgIGlmIGFzayA9PSAneScgb3IgYXNrID09ICdZJzoNCiAgICAgICAgbWFpbigpDQogICAgZWxpZiBhc2sgPT0gJ3QnIG9yIGFzayA9PSAnVCc6DQogICAgICAgIHN5cy5leGl0KCkNCiAgICBlbHNlOg0KICAgICAgICBwcmludCBtICsgJ1snICsgbSArICchJyArIG0gKyAnXScgKyBwICsgJyBDaG9vc2UgdGhlIHJpZ2h0IG9uZSAnICsgbSArICchISEnDQogICAgICAgIHJhd19pbnB1dChtICsgJ1snICsgcCArICdeJyArIG0gKyAnXScgKyBwICsgJyBQcmVzcyBFbnRlciB0byBSZXR1cm4gdG8gdGhlIG1lbnUgJykNCiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgICAgIG1haW4oKQ0KDQoNCmRlZiB1bnB5YygpOg0KICAgIHByaW50IG0gKyAnWycgKyBwICsgJyMnICsgbSArICddJyArIHAgKyAnIEZvciBFeGFtcGxlIDogL3BhdGgvZmlsZS5weWMnDQogICAgZiA9IHJhd19pbnB1dChtICsgJ1snICsgcCArICc/JyArIG0gKyAnXScgKyBwICsgJyBFbnRlciBZb3VyIEZpbGUgOiAnKQ0KICAgIHRyeToNCiAgICAgICAgb3BlbihmLCAncicpLnJlYWQoKQ0KICAgIGV4Y2VwdCBJT0Vycm9yOg0KICAgICAgICBwcmludCBtICsgJ1snICsgbSArICchJyArIG0gKyAnXScgKyBwICsgJyBGaWxlIE5vdCBGb3VuZCcNCiAgICAgICAgcmF3X2lucHV0KG0gKyAnWycgKyBwICsgJ14nICsgbSArICddJyArIHAgKyAnIFByZXNzIEVudGVyIHRvIFJldHVybiB0byB0aGUgbWVudSAnKQ0KICAgICAgICBtYWluKCkNCiAgICBlbHNlOg0KICAgICAgICBsb2FkKG0gKyAnWycgKyBwICsgJyMnICsgbSArICddJyArIHAgKyAnIERlY29tcGlsZSBwcm9jZXNzIFdhaXQgYSBtaW51dGUgLi4uJykNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgb3Muc3lzdGVtKCd1bmNvbXB5bGU2ICcgKyBmICsgJz4gdW5weWMvcmltb24ucHknKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBwcmludCBtICsgJ1snICsgbSArICchJyArIG0gKyAnXScgKyBwICsgJyBGYWlsZWQgdG8gZGVjb21waWxlIGJlY2F1c2UgOiAnICsgZQ0KDQogICAgcHJpbnQgJ1xuXG4nICsgbSArICdbJyArIHAgKyAnIycgKyBtICsgJ10nICsgcCArICcgU3VjY2Vzc2Z1bGx5IERlY29tcGlsZWQnDQogICAgcHJpbnQgbSArICdbJyArIHAgKyAnIycgKyBtICsgJ10nICsgcCArICcgZmlsZSBzYXZlZCA6IHVucHljL3JpbW9uLnB5Jw0KICAgIGFzayA9IHJhd19pbnB1dChtICsgJ1snICsgcCArICc/JyArIG0gKyAnXScgKyBwICsgJyBEZWNvbXBpbGUgQWdhaW4/IHkvdCA+PiAnKQ0KICAgIGlmIGFzayA9PSAneScgb3IgYXNrID09ICdZJzoNCiAgICAgICAgbWFpbigpDQogICAgZWxpZiBhc2sgPT0gJ3QnIG9yIGFzayA9PSAnVCc6DQogICAgICAgIHN5cy5leGl0KCkNCiAgICBlbHNlOg0KICAgICAgICBwcmludCBtICsgJ1snICsgbSArICchJyArIG0gKyAnXScgKyBwICsgJyBDaG9vc2UgdGhlIHJpZ2h0IG9uZSAnICsgbSArICchISEnDQogICAgICAgIHJhd19pbnB1dChtICsgJ1snICsgcCArICdeJyArIG0gKyAnXScgKyBwICsgJyBQcmVzcyBFbnRlciB0byBSZXR1cm4gdG8gdGhlIG1lbnUgJykNCiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgICAgIG1haW4oKQ0KDQoNCmRlZiBtemIoKToNCiAgICBwcmludCAnRGVjb21waWxlIE1hcnNoYWwsWmxpYixCYXNlNjQnDQogICAgYSA9IHJhd19pbnB1dCgnRmlsZSA6ICcpDQogICAgYiA9IG9wZW4oYSkucmVhZCgpLnJlcGxhY2UoJ2V4ZWMoJywgJ3ggPSAnKS5yZXBsYWNlKCcpKSkpJywgJykpKScpDQogICAgbm90ZSA9ICdERUNPTVBJTEVEIEJZIE1IQU5LIEJBUkJBUicNCiAgICBjID0gb3BlbignbWkucHknLCAndycpDQogICAgaWYgJ21hcnNoYWwnIGluIGI6DQogICAgICAgIGMud3JpdGUoJ2Zyb20gc3lzIGltcG9ydCBzdGRvdXRcbmZyb20gdW5jb21weWxlNi5tYWluIGltcG9ydCBkZWNvbXBpbGVcbicgKyBiICsgJ1xuZGVjb21waWxlKDIuNywgeCwgc3Rkb3V0KScpDQogICAgICAgIGMuY2xvc2UoKQ0KICAgIGVsaWYgJ21hcnNoYWwnIG5vdCBpbiBiOg0KICAgICAgICBjLndyaXRlKGIgKyAnXG5wcmludCAoeCknKQ0KICAgICAgICBjLmNsb3NlKCkNCiAgICBkID0gYS5yZXBsYWNlKCcucHknLCAnLWQucHknKQ0KICAgIG9zLnN5c3RlbSgncHl0aG9uMiBtaS5weSA+ICcgKyBkKQ0KICAgIGUgPSBvcGVuKGQpLnJlYWQoKQ0KICAgIGYgPSBvcGVuKGQsICd3JykNCiAgICBmLndyaXRlKGUgKyAnIFxuXG5cblx0JyArIG5vdGUpDQogICAgZi5jbG9zZSgpDQogICAgb3Muc3lzdGVtKCdybSAtcmYgbWkucHknKQ0KICAgIHByaW50ICdceDFiWzMxOzFtW1x4MWJbMDszN20rXHgxYlszMTsxbV1ceDFiWzA7MzdtIEZpbGUgc2F2ZWQgYXNceDFiWzMyOzFtICcgKyBkDQogICAgcHJpbnQgJ01hdSBEZWMgTGFnaSBZIG9yIE4gPycNCiAgICBjdWsgPSByYXdfaW5wdXQoJ1BpbGloIDogJykNCiAgICBpZiBjdWsgPT0gJ3knOg0KICAgICAgICBtemIoKQ0KICAgIGVsaWYgY3VrID09ICduJzoNCiAgICAgICAgZXhpdCgpDQoNCg0KZGVmIHpsKCk6DQogICAgcHJpbnQgJ0RlY29tcGlsZSBabGliJw0KICAgIGEgPSByYXdfaW5wdXQoJ0ZpbGUgOiAnKQ0KICAgIGIgPSBvcGVuKGEpLnJlYWQoKS5yZXBsYWNlKCdleGVjJywgJ3ByaW50JykNCiAgICBjID0gb3BlbignbWEucHknLCAndycpDQogICAgaWYgJ3psaWInIGluIGI6DQogICAgICAgIGMud3JpdGUoJyMgQmFjb2RcbicgKyBiICsgJyMgTG9lIEtvbnRvbCcpDQogICAgICAgIGMuY2xvc2UoKQ0KICAgIGVsaWYgJ3psaWInIG5vdCBpbiBiOg0KICAgICAgICBjLndyaXRlKGIgKyAnXG5wcmludCAocHJpbnQpJykNCiAgICAgICAgYy5jbG9zZSgpDQogICAgZCA9IGEucmVwbGFjZSgnLnB5JywgJy1kLnB5JykNCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbjIgbWEucHkgPiAnICsgZCkNCiAgICBlID0gb3BlbihkKS5yZWFkKCkucmVwbGFjZSgnIyB1bmNvbXB5bGU2IHZlcnNpb24gMy42LjInLCAnIyBWZXJzaSBVbmtvbXBlbCAwLjAgOnYnKS5yZXBsYWNlKCcjIEVtYmVkZGVkIGZpbGUgbmFtZTogJywgJyMgSW5pIE5paDp2ICcpLnJlcGxhY2UoJyMgRGVjb21waWxlZCBmcm9tOiBQeXRob24gMi43LjE3IChkZWZhdWx0LCBPY3QgMjMgMjAxOSwgMDg6Mjg6MjIpJywgJyMgRGVjb21wZWwgQnkgTWhhbmsgQmFyQmFyIEdhbnMnKS5yZXBsYWNlKCcjIFtHQ0MgNC4yLjEgQ29tcGF0aWJsZSBBbmRyb2lkICg1MjIwMDQyIGJhc2VkIG9uIHIzNDYzODljKSBDbGFuZyA4LjAuNyAoaHR0cHM6Ly8nLCAnSGFsbyBPbScpLnJlcGxhY2UoJyMgUHl0aG9uIGJ5dGVjb2RlIDIuNycsICcjIFBpdG9uIEJpdGtvZGUgMi43JykNCiAgICBmID0gb3BlbihkLCAndycpDQogICAgZi53cml0ZSgnIyBTdWtzZXNzIERlY29tcGlsZSBceGUyXHg5Y1x4OTMgXG4nICsgZSkNCiAgICBmLmNsb3NlKCkNCiAgICBvcy5zeXN0ZW0oJ3JtIC1yZiBtYS5weScpDQogICAgcHJpbnQgJ0ZpbGUgc2FjZWQgYXMgJyArIGQNCiAgICBzeXMuZXhpdCgpDQoNCg0KZGVmIGV4aXQoKToNCiAgICBydW4oJ3RoYW5rcyBmb3IgdXNpbmcgdGhpcyB0b29scyBEZWFyOiknKQ0KICAgIHN5cy5leGl0KCkNCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIGlmIG9zLnBhdGguZXhpc3RzKCd1bnB5YycpOg0KICAgICAgICBtYWluKCkNCiAgICBlbHNlOg0KICAgICAgICBvcy5zeXN0ZW0oJ21rZGlyIHVucHljJykNCiAgICAgICAgbWFpbigp"))